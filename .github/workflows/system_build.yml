name: Build SystemMonitor

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller psutil matplotlib numpy paramiko GPUtil pillow fpdf

      # Linux build (.deb)
      - name: Build Linux .deb
        if: runner.os == 'Linux'
        run: |
          pyinstaller build_linux.spec --noconfirm --clean --windowed --onedir
          # Package into .deb using fpm (install fpm first)
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install --no-document fpm
          fpm -s dir -t deb -n systemmonitor -v 1.0 dist/SystemMonitor/=/opt/systemmonitor
        shell: bash

      # macOS build (.dmg)
      - name: Build macOS .app and .dmg
        if: runner.os == 'macOS'
        run: |
          pyinstaller build_macos.spec --noconfirm --clean --windowed
          hdiutil create -volname SystemMonitor -srcfolder dist/SystemMonitor(macOS).app -ov -format UDZO SystemMonitor-macOS.dmg
        shell: bash

      # Windows build (.exe + zip)
      - name: Build Windows .exe and zip
        if: runner.os == 'Windows'
        run: |
          pyinstaller build_windows.spec --noconfirm --clean --windowed --onedir
          Compress-Archive -Path dist\SystemMonitor\* -DestinationPath SystemMonitor-Windows.zip
        shell: pwsh

      # Upload artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: systemmonitor-${{ runner.os }}
          path: |
            dist/*.deb
            dist/*.dmg
            dist/*.zip
            dist/SystemMonitor*
