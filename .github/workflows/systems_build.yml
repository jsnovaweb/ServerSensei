name: Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pyinstaller pillow
          pip install psutil matplotlib numpy paramiko gputil fpdf2

      # Linux build
      - name: Build on Linux
        if: runner.os == 'Linux'
        run: |
          pyinstaller build_linux.spec --hidden-import=PIL
          # create .deb package
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          gem install --no-document fpm
          fpm -s dir -t deb -n myapp -v 1.0 dist/

      # macOS build
      - name: Build on macOS
        if: runner.os == 'macOS'
        run: |
          pyinstaller build_macos.spec --hidden-import=PIL
          # create .dmg package
          hdiutil create -volname MyApp -srcfolder dist/ -ov -format UDZO MyApp.dmg

      # Windows build
      - name: Build on Windows
        if: runner.os == 'Windows'
        run: |
          pyinstaller build_windows.spec --hidden-import=PIL
          powershell Compress-Archive -Path dist/* -DestinationPath MyApp.zip
        shell: pwsh

      # Upload artifacts
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ runner.os }}
          path: |
            ${{ runner.os == 'Linux' && 'myapp_1.0_amd64.deb' || '' }}
            ${{ runner.os == 'macOS' && 'MyApp.dmg' || '' }}
            ${{ runner.os == 'Windows' && 'MyApp.zip' || '' }}
